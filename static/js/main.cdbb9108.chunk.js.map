{"version":3,"sources":["components/DroppedContext.jsx","components/DesignElement.jsx","data/DesignImages.jsx","components/DesignToolbox.jsx","components/DesignCanvas.jsx","components/DesignSection.jsx","App.js","serviceWorker.js","index.js"],"names":["DroppedElement","createContext","DroppedProvider","children","useState","dropped","setDropped","providerValue","useMemo","Provider","value","DesignElement","id","path","useContext","refillParent","useRef","designElement","className","ref","div","drag","layout","dragMomentum","onDragStart","e","i","current","parentElement","target","offSet","getBoundingClientRect","myX","left","window","scrollX","myY","top","scrollY","style","document","body","append","onDragEnd","dropOffset","transform","stageOffset","querySelector","Date","now","imageId","frame","pointerEvents","data-id","src","alt","images","imgPaths","map","img","DesignToolbox","key","DesignCanvas","dropArr","setDropArr","useEffect","dA","DroppedDesign","set","onClick","data-frame","DE","DesignSection","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cdbb9108.chunk.js","sourcesContent":["\r\nimport React, {createContext, useState, useMemo} from \"react\"\r\n\r\nexport const DroppedElement = createContext()\r\nexport function DroppedProvider({ children }) {\r\n    const [ dropped , setDropped ] = useState()\r\n    const providerValue = useMemo(() => ({dropped, setDropped}), [dropped, setDropped])\r\n    return (\r\n        <DroppedElement.Provider value={providerValue}>\r\n            {children}\r\n        </DroppedElement.Provider>\r\n    )\r\n}","import React, { useRef, useState, useContext } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport {DroppedElement} from \"./DroppedContext\"\r\n\r\nexport default function DesignElement({id, path}) {\r\n    \r\n    const {setDropped}  = useContext(DroppedElement);\r\n    const [idNum, setIdNum] = useState(0);\r\n    const refillParent  = useRef(null);\r\n    const designElement = useRef(null);\r\n    function dragStart(e, i) {\r\n      if (designElement.current.parentElement === refillParent.current){\r\n        var target = designElement.current\r\n        var offSet = target.getBoundingClientRect();\r\n        var myX = (offSet.left + window.scrollX)\r\n        var myY = (offSet.top  + window.scrollY)\r\n        target.style.top  = myY + \"px\";\r\n        target.style.left = myX + \"px\";\r\n        document.body.append(target);\r\n      }\r\n    }\r\n  \r\n    function dragEnd(e, i) {\r\n      \r\n      var target = designElement.current\r\n      var dropOffset  = target.getBoundingClientRect();\r\n      target.style.top  = \"0px\"\r\n      target.style.left = \"0px\"\r\n      target.style.transform = \"translate3d(0px, 0px, 0px) scale(1, 1)\" \r\n      refillParent.current.append(target)\r\n      \r\n      var stage = document.querySelector(\".designCanvas\")\r\n      var stageOffset = stage.getBoundingClientRect();\r\n      var myY = (dropOffset.top  + window.scrollY  ) - ( stageOffset.top + window.scrollY  )  \r\n      var myX = (dropOffset.left + window.scrollX  ) - ( stageOffset.left + window.scrollX )\r\n      // add({id:id, frame: [myX, myY, 1, 0]});\r\n      setDropped({id:Date.now(), imageId:id, path:path, frame: [myX, myY, 1, 0]})\r\n      //setDropped({id:id, frame: [myX, myY, 1, 0]})\r\n    }\r\n  \r\n    return (\r\n      <div className=\"dragHome\" ref={refillParent}>\r\n        <motion.div\r\n          drag\r\n          layout\r\n          className    = \"draggable\"\r\n          ref          = {designElement}\r\n          dragMomentum = {false}\r\n          onDragStart  = {dragStart}\r\n          onDragEnd    = {dragEnd}\r\n        >\r\n          <img style={{pointerEvents:'none'}} data-id={id} src={path} alt={path}/>\r\n        </motion.div>\r\n      </div>\r\n    );\r\n\r\n}","export const folder = \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/40041/\";\r\nexport const images = [\r\n  \"DD_01.png\",\r\n  \"DD_02.png\",\r\n  \"DD_03.png\",\r\n  \"DD_04.png\",\r\n  \"DD_05.png\",\r\n  \"DD_06.png\",\r\n  \"DD_07.png\",\r\n  \"DD_08.png\",\r\n  \"DD_09.png\",\r\n  \"DD_10.png\",\r\n  \"DD_11.png\",\r\n  \"DD_12.png\",\r\n  \"DD_13.png\",\r\n  \"DD_14.png\",\r\n  \"DD_15.png\",\r\n  \"DD_16.png\",\r\n  \"DD_17.png\",\r\n  \"DD_18.png\",\r\n  \"DD_19.png\",\r\n  \"DD_20.png\",\r\n  \"DD_21.png\",\r\n  \"DD_22.png\",\r\n  \"DD_23.png\",\r\n  \"DD_24.png\",\r\n  \"DD_25.png\",\r\n  \"DD_26.png\",\r\n];\r\nexport const imgPaths = () => images.map( (img, i) => ({ id:i, path:folder+img }) )  \r\nexport const getImg = (id) => imgPaths.find( (e) => e.id === id);","import React from \"react\";\r\nimport DesignElement from \"./DesignElement\"\r\nimport { imgPaths } from \"../data/DesignImages\"\r\n\r\nexport default function DesignToolbox() {\r\n    const images = imgPaths()\r\n    return (\r\n    <div className=\"designToolbox\">\r\n        {images.map( i => <DesignElement key={\"DE_\"+i.id} id={i.id} path={i.path} />)}\r\n    </div>\r\n    );\r\n}","import React, { useState, useContext, useEffect } from \"react\";\r\nimport Moveable from \"react-moveable\";\r\nimport {DroppedElement} from \"./DroppedContext\"\r\nimport { imgPaths } from \"../data/DesignImages\"\r\n/*\r\nimport { motion } from \"framer-motion\";\r\nimport DesignSection from \"./components/DesignSection\"\r\nimport {imgPaths} from \"./data/DesignImages\"\r\n*/\r\n\r\nexport default function DesignCanvas(){\r\n\r\n    const {dropped} = useContext(DroppedElement);\r\n    const [dropArr, setDropArr] = useState([])\r\n\r\n    useEffect(() => {\r\n        dropped && setDropArr( dA => [...dA, dropped])\r\n    }, [dropped])\r\n\r\n    const DroppedDesign = ({id,path,frame, set}) => {\r\n        const selectMe = (e) => {/* set(e.target) */}\r\n        return(\r\n          <div\r\n          className=\"draggable\"\r\n          onClick={selectMe}\r\n          style={{transform:`translate(${frame[0]}px, ${frame[1]}px) scale(${frame[2]}, ${frame[2]}) rotate(${frame[3]}deg)`}}\r\n          data-frame=\"0, 0, 1, 0\" >\r\n          <img style={{pointerEvents:'none'}} src={path} alt={id} />\r\n        </div>\r\n        ) \r\n    };\r\n\r\n    /*\r\n    const [selected  , setSelected  ] = useState();\r\n    const [tempFrame , setTempFrame ] = useState({\r\n      translate :[ 0 , 0 ] ,\r\n      scale     :[ 1 , 1 ] ,\r\n      rotate    :0\r\n    });\r\n\r\n    const DroppedDesign = ({img,frame, set}) => {\r\n      const selectMe = (e) => { set(e.target) }\r\n      return(\r\n        <div\r\n        className=\"draggable\"\r\n        onClick={selectMe}\r\n        style={{transform:`translate(${frame[0]}px, ${frame[1]}px) scale(${frame[2]}, ${frame[2]}) rotate(${frame[3]}deg)`}}\r\n        data-frame=\"0, 0, 1, 0\" >\r\n        <img src={`https://s3-us-west-2.amazonaws.com/s.cdpn.io/40041/${img}`} alt={img} />\r\n      </div>\r\n      ) \r\n    };\r\n    const thisStartEvent = (e, type) => {\r\n      const F = e.target.dataset.frame.split(\",\").map( n => parseFloat(n) )\r\n      const updatedFrame = {\r\n        translate :[ F[0] , F[1] ] ,\r\n        scale     :[ F[2] , F[2] ] ,\r\n        rotate    :F[3]\r\n      }\r\n      type === \"drag\"   && e.set(updatedFrame.translate);\r\n      type === \"rotate\" && e.set(updatedFrame.rotate);\r\n      type === \"scale\"  && e.set(updatedFrame.scale);\r\n  \r\n      e.dragStart && e.dragStart.set(updatedFrame.translate);\r\n      setTempFrame(updatedFrame);\r\n      console.log(tempFrame)\r\n    };\r\n    const thisUpdateEvent = (e) => {\r\n      setTempFrame({\r\n        translate: e.beforeTranslate ? e.beforeTranslate : tempFrame.translate,\r\n        scale: e.scale ? e.scale : tempFrame.scale,\r\n        rotate: e.beforeRotate ? e.beforeRotate : tempFrame.rotate,\r\n      });\r\n  \r\n      e.target.style.transform =\r\n        `translate(${tempFrame.translate[0]}px, ${tempFrame.translate[1]}px)` +\r\n        ` scale(${tempFrame.scale[0]}, ${tempFrame.scale[1]})` +\r\n        ` rotate(${tempFrame.rotate}deg)`;      \r\n    };  \r\n    const thisEndEvent = (e)=>{\r\n      e.target.setAttribute('data-frame', `${tempFrame.translate[0]},${tempFrame.translate[1]},${tempFrame.scale[0]},${tempFrame.rotate}`)\r\n    }\r\n    //{get().map( (e,i) => <DroppedDesign key={`dropped_${i}`} img={e.img} frame={e.frame} set={setSelected} />)}\r\n    console.log('test',{dropped})\r\n\r\n    const MoveableElement = () =>(\r\n        <Moveable\r\n            target={selected}\r\n            renderDirections={[\"nw\",\"ne\",\"w\",\"e\",\"sw\",\"s\",\"se\"]}\r\n            edge={false}\r\n            zoom={1}\r\n            origin={false}\r\n            padding={{ left: 0, top: 0, right: 0, bottom: 0 }}\r\n    \r\n            //DRAGGING\r\n            draggable={true}\r\n            throttleDrag={0}\r\n            onDragStart={(e) => thisStartEvent(e, \"drag\")}\r\n            onDrag={thisUpdateEvent}\r\n            onDragEnd={thisEndEvent}\r\n            \r\n            //SCALING\r\n            scalable={true}\r\n            keepRatio={true}\r\n            throttleScale={0}\r\n            onScaleStart={(e) => thisStartEvent(e, \"scale\")}\r\n            onScale={thisUpdateEvent}\r\n            onScaleEnd={thisEndEvent}\r\n            \r\n            //ROTATING\r\n            rotatable={true}\r\n            rotationPosition={\"top\"}\r\n            onRotateStart={(e) => thisStartEvent(e, \"rotate\")}\r\n            onRotate={thisUpdateEvent}\r\n            onRotateEnd={thisEndEvent}\r\n            \r\n            //PINCHING\r\n            pinchable={true}\r\n        />\r\n    )\r\n    */\r\n    return (\r\n      <div className=\"designCanvas\">\r\n          {dropArr.map( (DE) => <DroppedDesign key={DE.id} id={DE.id} path={DE.path} frame={DE.frame} set={'g'}/> )}\r\n      </div>\r\n    ) ;\r\n  }\r\n  ","import React from \"react\";\r\nimport DesignToolBox from \"./DesignToolbox\"\r\nimport DesignCanvas from \"./DesignCanvas\"\r\nimport {DroppedProvider} from \"./DroppedContext\"\r\n\r\nexport default function DesignSection() {\r\n  return (\r\n    <section className=\"DesignSection\" >\r\n      <DroppedProvider>\r\n        <DesignCanvas  />\r\n        <DesignToolBox />\r\n      </DroppedProvider>\r\n    </section>\r\n  ); \r\n}\r\n ","import React from \"react\";\nimport DesignSection from \"./components/DesignSection\"\nimport \"./style/App.scss\"\n\nconst App = () => <DesignSection/>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}